<aui:script use="aui-base, liferay-form, liferay-menu">
var _ = AUI._;

$(document).ready(function(){
	
	let SX = StationX(  '<portlet:namespace/>', 
								'<%= defaultLocale.toString() %>',
								'<%= locale.toString() %>',
								<%= jsonLocales.toJSONString() %> );
								
	/**************************************************************
    * 	When a liferay-ui:input-localized tag is included in the dialog template section, then 
    *  Liferay.Menu.register() function makes critical trouble so that localized functions donot 
    *  work.
    *				
	let $listOptionManagementDlg = $('#<portlet:namespace/>manageListOptions')
				.dialog({
					autoOpen: true,
					width: 400,
					modal: true,
					title: '<liferay-ui:message key="edit-list-option"/>',
					buttons: {
						'<liferay-ui:message key="add-option"/>': function(){
						},
						'<liferay-ui:message key="cancel"/>': function(){
						}
					}
				});
	****************************************************************/
	let setCurrentTerm = function( term ){
		currentTerm = term;
		// console.log( 'Current Term: ', term );
		dataStructure.replaceVisibleTypeSpecificSection( currentTerm.termType );
		currentTerm.setAllFormValues();
		
		if( currentTerm.isRendered() ){
			dataStructure.disable(['btnAdd', 'btnClear', 'termType'], true);
			dataStructure.disable(['btnUp', 'btnDown'], false);
		}
		else{
			dataStructure.disable(['btnAdd', 'btnClear', 'termType'], false);
			dataStructure.disable(['btnUp', 'btnDown'], true);
		}
		
		if( currentTerm.isGroupTerm() ){
			dataStructure.disable(['mandatory', 'abstractKey'], true);
		}
		else{
			dataStructure.disable(['mandatory', 'abstractKey'], false);
		}
		
		// console.log( 'Current term rendered: ' + currentTerm.isRendered() );
		if( currentTerm.isRendered() ){
			dataStructure.highlightTerm( currentTerm );
		}
	};

	let dataStructure;
	
	let jsonDataStructure = <%= (Validator.isNull(dataStructure)) ? "{}" : dataStructure.toJSONString() %>;
	
	let currentTerm = null;
	if( SX.Util.isEmptyObject(jsonDataStructure) ){
		dataStructure =  SX.newDataStructure(
												new Object(), 
												SX.SXConstants.FOR_PREVIEW, 
												$('#<portlet:namespace/>previewPanel'));
		setCurrentTerm( dataStructure.createTerm( SX.FormUIUtil.getFormValue( 'termType' ) ) );
	}
	else{
		dataStructure =  SX.newDataStructure( 
												jsonDataStructure,
												SX.SXConstants.FOR_PREVIEW, 
												$('#<portlet:namespace/>previewPanel'));
		dataStructure.render( SX.SXConstants.FOR_PREVIEW );
		
		setCurrentTerm( dataStructure.getTermByOrder(dataStructure.getTopLevelTermId(), 1) );
		dataStructure.highlightTerm( currentTerm );
	}
	
	/*
	let fileInputs = $( ':file');
	console.log( 'fileInputs: ', fileInputs);
	$(fileInputs[0]).FancyFileUpload({
				params:{
					action:'fileUploader'
				}
			});
	*/
	/**************************************************************
	* Change Event handlers for form controls 
	***************************************************************/
	SX.DataStructure.$TERM_DELIMITER_FORM_CTRL.change(function(eventObj){
			dataStructure.getTermDelimiterFormValue( true );
	});

	SX.DataStructure.$TERM_DELIMITER_POSITION_FORM_CTRL.change(function(eventObj){
			dataStructure.getTermDelimiterPositionFormValue( true );
	});
	
	SX.DataStructure.$TERM_VALUE_DELIMITER_FORM_CTRL.change(function(eventObj){
			dataStructure.getTermValueDelimiterFormValue( true );
	});

	SX.DataStructure.$MATRIX_BRACKET_TYPE_FORM_CTRL.change(function(eventObj){
			dataStructure.getMatrixBracketTypeFormValue( true );
	});
	
	SX.DataStructure.$MATRIX_ELEMENT_DELIMITER_FORM_CTRL.change(function(eventObj){
			dataStructure.getMatrixElementDelimiterFormValue( true );
	});

	SX.DataStructure.$COMMENT_CHAR_FORM_CTRL.change(function(eventObj){
			dataStructure.getCommentCharFormValue( true );
	});
	
	SX.Term.$DEFAULT_TERM_TYPE_FORM_CTRL.change(function(eventObj){
		let selectedTermType = currentTerm.getTermTypeFormValue( false );
		
		if( selectedTermType === currentTerm.termType ){
			// Do nothing
			return;
		}
		
		if( currentTerm.isRendered() ){
			$.alert({
				title: '<liferay-ui:message key="term-type-change-alert"/>',
				content: 'how-to-term-type-change'
			});
			
			setCurrentTerm( currentTerm );
		}
		else{
			setCurrentTerm( dataStructure.createTerm( selectedTermType ) );
			currentTerm.setDirty( true );
		}
	});
	
	SX.Term.$DEFAULT_TERM_NAME_FORM_CTRL.change(function(eventObj){
		if( currentTerm.$rendered ){
			// It means the current term is one of the data structure and previewed on the preview panel.
			// Therefore, we must confirm that the term's name be changed before the preview changed.
			$.confirm({
				title: '<liferay-ui:message key="select-term-type" />',
				content: '<liferay-ui:message key="this-term-is-previewed-are-you-sure-to-change-the-name-of-the-term" />',
				type: 'orange',
				typeAnimated: true,
				buttons:{
					ok: {
						text: 'OK',
						btnClass: 'btn-blue',
						action: function(){
							let changedName = currentTerm.getTermNameFormValue( false );
							if( dataStructure.exist( changedName ) ){
								$.alert( changedName + 'already exist. Should be changed another name.' );
								currentTerm.setTermNameFormValue();
							}
							else{
								if( currentTerm.validateNameExpression( changedName ) === true ){
									currentTerm.getTermNameFormValue(true);
									dataStructure.refreshTerm( currentTerm );
								}
								else{
									$.alert( 'Term Name[' + changedName +'] is unvalid. Try another one.');
									currentTerm.setTermNameFormValue();
								}
							} 
						}
					},
					cancel: function(){
						currentTerm.setTermNameFormValue();
					}
				},
				draggable: true
			}); 
		}
		else{
			currentTerm.getTermNameFormValue( true );
		}
	});

	SX.Term.$DEFAULT_TERM_VERSION_FORM_CTRL.change(function(eventObj){
		const changedVersion = currentTerm.getTermVersionFormValue( false );
		
		let validated;
		if( currentTerm.$rendered ){
			validated = SX.Term.validateTermVersion( changedVersion, currentTerm.termVersion );
		}
		else{
			validated = SX.Term.validateTermVersion( changedVersion );
		}
		
		if( validated === true ){
			currentTerm.getTermVersionFormValue();
			
		}
		else{
			$.alert( changedVersion + ' ' + validated );
			currentTerm.setTermVersionFormValue();
		} 
	});

	SX.Term.$DEFAULT_TERM_DISPLAY_NAME_FORM_CTRL.change(function(eventObj){
		currentTerm.getDisplayNameFormValue(true);
		dataStructure.refreshTerm( currentTerm );
	});
	
	$('#<portlet:namespace/>termDefinition').change(function(eventObj){
		currentTerm.getDefinitionFormValue(true);
		currentTerm.setDirty( true );
	});
	
	$('#<portlet:namespace/>abstractKey').change(function(eventObj){
		// console.log( 'abstractKey changed...', currentTerm);
		currentTerm.getAbstractKeyFormValue(true);
		currentTerm.setDirty( true );
	});
	
	$('#<portlet:namespace/>searchable').change(function(eventObj){
		// console.log( 'searchable changed...', currentTerm);
		currentTerm.getSearchableFormValue(); 
		dataStructure.setSearchable( currentTerm );
	});
	
	$('#<portlet:namespace/>downloadable').change(function(eventObj){
		// console.log( 'downloadable changed...', currentTerm);
		currentTerm.getDownloadableFormValue();
	});
	
	$('#<portlet:namespace/>termTooltip').change(function(eventObj){
		currentTerm.getTooltipFormValue(true);
		dataStructure.refreshTerm( currentTerm );
	});
	
	$('#<portlet:namespace/>placeHolder').change(function(eventObj){
		currentTerm.getPlaceHolderFormValue(true);
		dataStructure.refreshTerm( currentTerm );
	});

	$('#<portlet:namespace/>numericPlaceHolder').change(function(eventObj){
		currentTerm.getNumericPlaceHolderFormValue(true);
		dataStructure.refreshTerm( currentTerm );
	});
	
	$('#<portlet:namespace/>synonyms').change(function(eventObj){
		currentTerm.getSynonymsFormValue(true);
	});
	
	$('#<portlet:namespace/>mandatory').change(function(eventObj){
		currentTerm.getMandatoryFormValue(true);
		dataStructure.refreshTerm( currentTerm );
	});
	
	$('#<portlet:namespace/>value').change(function(eventObj){
		currentTerm.getValueFormValue(true);
		dataStructure.refreshTerm( currentTerm );
	});

	$('#<portlet:namespace/>minLength').change(function(eventObj){
		const changedValue = Number( currentTerm.getMinLengthFormValue() );
		
		if( isNaN( changedValue ) || changedValue <= 0){
			$.alert('Minimum length should be an interger larger than 0.');
			currentTerm.setMinLengthFormValue()
		}
		else{
			currentTerm.minLength = changedValue;
			currentTerm.setDirty( true );
			dataStructure.refreshTerm( currentTerm );
		}
	});
	
	$('#<portlet:namespace/>maxLength').change(function(eventObj){
		const minLength = currentTerm.getMinLengthFormValue();
		const maxLength = currentTerm.getMaxLengthFormValue();
		if( maxLength < minLength ){
			$.alert('Maximum length should be larger than minimum length.');
			currentTerm.setMaxLengthFormValue();
		}
		else{
			currentTerm.getMaxLengthFormValue(true);
			currentTerm.setDirty( true );
			dataStructure.refreshTerm( currentTerm );
		}
	});

	$('#<portlet:namespace/>multipleLine').change(function(eventObj){
		currentTerm.getMultipleLineFormValue(true);
		currentTerm.setDirty( true );
		dataStructure.refreshTerm( currentTerm );
	});

	$('#<portlet:namespace/>validationRule').change(function(eventObj){
		currentTerm.getValidationRuleFormValue(true);
		currentTerm.setDirty( true );
	});
	
	$('#<portlet:namespace/>minValue').change(function(eventObj){
		const preValue = currentTerm.minValue;
	
		currentTerm.getMinValueFormValue(true);
		currentTerm.setDirty( true );
		
		if( !currentTerm.minValue ){
			currentTerm.setMinBoundaryFormValue();
			dataStructure.disable(['minBoundary'], true);
			//$('#<portlet:namespace/>minBoundary').prop('disabled', true);
		}
		else{
			dataStructure.disable(['minBoundary'], false);
			//$('#<portlet:namespace/>minBoundary').prop('disabled', false);
		}
		
		if( preValue !== currentTerm.minValue ){
			dataStructure.refreshTerm( currentTerm );
		}
	});

	$('#<portlet:namespace/>minBoundary').change(function(eventObj){
		currentTerm.getMinBoundaryFormValue(true);
		currentTerm.setDirty( true );
		dataStructure.refreshTerm( currentTerm );
	});
	
	$('#<portlet:namespace/>maxValue').change(function(eventObj){
		const preValue = currentTerm.maxValue;
		
		currentTerm.getMaxValueFormValue(true);
		currentTerm.setDirty( true );
		
		if( !currentTerm.maxValue ){
			currentTerm.setMaxBoundaryFormValue();
			dataStructure.disable(['maxBoundary'], true);
//			$('#<portlet:namespace/>maxBoundary').prop('disabled', true);
		}
		else{
			dataStructure.disable(['maxBoundary'], false);
//			$('#<portlet:namespace/>maxBoundary').prop('disabled', false);
		}
		
		if( preValue !== currentTerm.maxValue ){
			dataStructure.refreshTerm( currentTerm );
		}
	});

	$('#<portlet:namespace/>maxBoundary').change(function(eventObj){
		currentTerm.getMaxBoundaryFormValue(true);
		currentTerm.setDirty( true );
		dataStructure.refreshTerm( currentTerm );
	});

	$('#<portlet:namespace/>unit').change(function(eventObj){
		currentTerm.getUnitFormValue(true);
		currentTerm.setDirty( true );
		dataStructure.refreshTerm( currentTerm );
	});
	
	$('#<portlet:namespace/>uncertainty').change(function(eventObj){
		currentTerm.getUncertaintyFormValue(true);
		currentTerm.setDirty( true );
		dataStructure.refreshTerm( currentTerm );
	});

	$('#<portlet:namespace/>sweepable').change(function(eventObj){
		currentTerm.getSweepableFormValue(true);
		currentTerm.setDirty( true );
	});
	
	$('input[name="<portlet:namespace/>listDisplayStyle"]').change(function(eventObj){
		currentTerm.getDisplayStyleFormValue(true);
		currentTerm.setDirty( true );
		dataStructure.refreshTerm( currentTerm );
	});
	
	SX.ListTerm.$OPTION_LABEL.change(function(event){
		let labelMap = currentTerm.getOptionLabelFormValue();
		if( Object.keys(labelMap).length === 0 ){
			$.alert('<liferay-ui:message key="option-label-required"/>');
			currentTerm.setOptionLabelFormValue();
			SX.ListTerm.$OPTION_LABEL.focus();
			
			return;
		}
		
		currentTerm.setOptionLabelMap( labelMap );
		
		currentTerm.setDirty( true );
		dataStructure.refreshTerm( currentTerm );
	});
	
	SX.ListTerm.$OPTION_VALUE.change(function(event){
		let value = currentTerm.getOptionValueFormValue();
		if( !value ){
			$.alert('<liferay-ui:message key="option-label-required"/>');
			currentTerm.setOptionValueFormValue();
			SX.ListTerm.$OPTION_VALUE.focus();
			
			return;
		}
		
		currentTerm.setOptionValue( value );
		
		currentTerm.setDirty( true );
		dataStructure.refreshTerm( currentTerm );
	});
	
	SX.ListTerm.$OPTION_SELECTED.change(function(event){
		let value = currentTerm.getOptionSelectedFormValue();
		
		currentTerm.setOptionSelected( value );
		currentTerm.setDirty( true );
		dataStructure.refreshTerm( currentTerm );
	});
	
	SX.ListTerm.$OPTION_ACTIVE_TERMS.change(function(event){
		let activeTermNames = currentTerm.getActiveTermsFormValue();
		
		currentTerm.setActiveTerms( activeTermNames );
		currentTerm.setDirty( true );
		// console.log('active terms: ', activeTermNames);
	});
	
	$('input[name="<portlet:namespace/>booleanDisplayStyle"]').change(function(event){
		// console.log( 'Boolean display style changed: ', currentTerm.getDisplayStyleFormValue( true ) );
		currentTerm.setDirty( true );
		dataStructure.refreshTerm( currentTerm );
	});
	
	SX.DateTerm.$DEFAULT_ENABLE_TIME_FORM_CTRL.change(function(event){
		currentTerm.getEnableTimeFormValue();
		dataStructure.refreshTerm( currentTerm );
	});
	
	SX.DateTerm.$DEFAULT_START_YEAR_FORM_CTRL.change(function(event){
		currentTerm.getStartYearFormValue();
		dataStructure.refreshTerm( currentTerm );
	});
	
	SX.DateTerm.$DEFAULT_END_YEAR_FORM_CTRL.change(function(event){
		currentTerm.getEndYearFormValue();
		dataStructure.refreshTerm( currentTerm );
	});
	
	$('#<portlet:namespace/>allowedExtensions').change(function(event){
		currentTerm.setDirty( true );
		console.log( 'allowed extensions: ', SX.FormUIUtil.getFormValue( 'allowedExtensions' ).split(',') ); 
	});
	

	/**************************************************************
	* Custom Liferay event handlers
	**************************************************************/
	
	Liferay.on(SX.SXIcecapEvents.DATATYPE_PREVIEW_TERM_DELETED, function(event){
		let eventData = event.sxeventData;
		 
		if( eventData.targetPortlet !== '<portlet:namespace/>' ){
			return;
		}
		
		dataStructure.removeTerm( eventData.term.termName );
		
		dataStructure.render( SX.SXConstants.FOR_PREVIEW );
	});
	
	Liferay.on(SX.SXIcecapEvents.DATATYPE_PREVIEW_COPY_TERM, function(event){
		let eventData = event.sxeventData;
		 
		if( eventData.targetPortlet !== '<portlet:namespace/>' ){
			return;
		}
		
		console.log('DATATYPE_PREVIEW_COPY_TERM', eventData);
		
		dataStructure.copyTerm( eventData.term );
	});
	
	Liferay.on(SX.SXIcecapEvents.DATATYPE_PREVIEW_TERM_SELECTED, function(event){
		let eventData = event.sxeventData;
		// console.log('DATATYPE_PREVIEW_TERM_SELECTED', eventData, currentTerm);
		if( eventData.targetPortlet !== '<portlet:namespace/>' ){
			console.log( 'Return by different portlet!!!' );
			return;
		}
		
		setCurrentTerm( eventData.term );
		dataStructure.highlightTerm( currentTerm );
		// console.log( 'Selected current term: ', currentTerm );
	});

	
	Liferay.on( SX.SXIcecapEvents.LIST_OPTION_PREVIEW_REMOVED, function( event ){
		let eventData = event.sxeventData;
				
		if( eventData.targetPortlet !== '<portlet:namespace/>' ){
			return;
		}

		let removedOption = eventData.option;

		currentTerm.removeOption( removedOption.value );
		
		dataStructure.render( SX.SXConstants.FOR_PREVIEW );
	});

	Liferay.on( SX.SXIcecapEvents.LIST_OPTION_PREVIEW_SELECTED, function( event ){
		let eventData = event.sxeventData;
		if( eventData.targetPortlet !== '<portlet:namespace/>' ){
			return;
		}

		currentTerm.initOptionFormValues( eventData.option );
		currentTerm.highlightOptionPreview(); 
	});
	
	Liferay.on( SX.SXIcecapEvents.DATATYPE_FORM_UI_SHOW_TERMS, function( event ){
		let eventData = event.sxeventData;
		// console.log( 'SX.SXIcecapEvents.DATATYPE_FORM_UI_SHOW_TERMS received...', eventData);
		
		if( eventData.targetPortlet !== '<portlet:namespace/>' ){
			return;
		}
		
		dataStructure.activateDependentTerms( eventData.term, eventData.optionValue, SX.SXConstants.FOR_PREVIEW );
	});
	
	Liferay.on( SX.SXIcecapEvents.DATATYPE_FORM_UI_CHECKBOX_CHANGED, function( event ){
		let eventData = event.sxeventData;
		// console.log( 'SX.SXIcecapEvents.DATATYPE_FORM_UI_CHECKBOX_CHANGED received...', eventData);
		
		if( eventData.targetPortlet !== '<portlet:namespace/>' ){
			return;
		}
		
		dataStructure.activateDependentTerms( eventData.term, eventData.optionValue, SX.SXConstants.FOR_PREVIEW );
	});
	
	Liferay.on( SX.SXIcecapEvents.DATATYPE_PREVIEW_REMOVE_TERM, function( event ){
		let eventData = event.sxeventData;
		// console.log( 'SX.SXIcecapEvents.DATATYPE_PREVIEW_REMOVE_TERM received...', eventData);
		
		if( eventData.targetPortlet !== '<portlet:namespace/>' ){
			return;
		}
		
		dataStructure.removeTerm( eventData.term );
		
		// console.log('Data Structure: ', dataStructure );
	});
	
	Liferay.on( SX.SXIcecapEvents.DATATYPE_PREVIEW_DELETE_TERM, function( event ){
		let eventData = event.sxeventData;
		// console.log( 'SX.SXIcecapEvents.DATATYPE_PREVIEW_DELETE_TERM received...', eventData);
		
		if( eventData.targetPortlet !== '<portlet:namespace/>' ){
			return;
		}
		
		dataStructure.deleteTerm( eventData.term );
		
		// console.log('Data Structure: ', dataStructure );
	});

	Liferay.on( SX.SXIcecapEvents.DATATYPE_SDE_VALUE_CHANGED, function( event ){
		let eventData = event.sxeventData;
		console.log( 'SX.SXIcecapEvents.DATATYPE_SDE_VALUE_CHANGED received...', eventData);
		
		if( eventData.targetPortlet !== '<portlet:namespace/>' ){
			return;
		}
	});
	
	/*******************************************************************************
	* Event handlers for buttons
	*******************************************************************************/
	$('#<portlet:namespace/>btnNewTerm').click(function(){
		// dataStructure.disable(['termType'], false);
		
		setCurrentTerm( dataStructure.createTerm( $('#<portlet:namespace/>dlgTermType').val() ) );
		
		/*
		$.confirm({
			title: '<liferay-ui:message key="select-term-type" />',
			content: $('#<portlet:namespace/>termTypeSelector').html(),
			type: 'orange',
			typeAnimated: true,
			buttons:{
				ok: {
					text: 'OK',
					btnClass: 'btn-blue',
					action: function(){
						setCurrentTerm( dataStructure.createTerm( $('#<portlet:namespace/>dlgTermType').val() ) );
					}
				},
				cancel: function(){
					
				}
			},
			draggable: true
		});
		*/
	});

	$('#<portlet:namespace/>btnCopyTerm').click(function(){
		// setCurrentTerm( dataStructure.copyTerm( currentTerm ) );
		dataStructure.addTestSet( SX.SXConstants.FOR_PREVIEW, $('#<portlet:namespace/>previewPanel') );
	});
	
	$('#<portlet:namespace/>btnClear').click(function(){
		currentTerm.initAllFormValues();
	});

	$('#<portlet:namespace/>btnImportTerm').click(function(){
		dataStructure = SX.newDataStructure(
												crfSampleDataType, 
												SX.SXConstants.FOR_PREVIEW, 
												$('#<portlet:namespace/>previewPanel'));
		
		dataStructure.render(SX.SXConstants.FOR_PREVIEW);
		console.log( 'Imported Data Type: ', dataStructure );
	});
	
	SX.ListTerm.$BTN_NEW_OPTION.click(function(){
		
		// console.log( 'click new button' );
		
		/*
		$listOptionManagementDlg.dialog( 'open' );
		*/
	
		currentTerm.initOptionFormValues();
		dataStructure.disable(['btnAddOption'], false);
	
		/*
		console.log($('#<portlet:namespace/>optionManagementDlg' ).html());
		$.confirm({
			title: '<liferay-ui:message key="define-new-option" />',
			content: $('#<portlet:namespace/>optionManagementDlg' ).html(),
			type: 'orange',
			typeAnimated: true,
			columnClass: 'medium',
			buttons:{
				ok: {
					text: '<liferay-ui:message key="add"/>',
					btnClass: 'btn-blue',
					action: function(){
						let labelMap = currentTerm.getOptionLabelFormValue();
						// console.log( 'labelMap: ', $('#<portlet:namespace/>optionLabel').val() );
						if( Object.keys(labelMap).length === 0 ){
							$.alert('<liferay-ui:message key="option-label-cannot-be-empty"/>');
							$('#<portlet:namespace/>optionLabel').focus();
							return false;
						}
					}
				},
				cancel: function(){
					
				}
			},
			draggable: true
		});
		*/
		
	});
	
	SX.ListTerm.$BTN_CHOOSE_ACTIVE_TERMS.click(function(event){
		let option = currentTerm.getHighlightedOption();
		if( !option ){
			option = currentTerm.addOption();
			if( !option ){
				return;
			}
		}
		
		dataStructure.disable(['btnAddOption'], true);

		dataStructure.chooseActiveTerms( currentTerm, option );		
		dataStructure.refreshTerm( currentTerm );
	});
	
	SX.BooleanTerm.$TRUE_ACTIVE_TERMS_BUTTON.click(function(event){
		dataStructure.chooseActiveTerms( currentTerm, currentTerm.getTrueOption() );
	});
	
	SX.BooleanTerm.$FALSE_ACTIVE_TERMS_BUTTON.click(function(event){
		dataStructure.chooseActiveTerms( currentTerm, currentTerm.getFalseOption() );
	});
	
	SX.GroupTerm.$BTN_CHOOSE_GROUP_TERMS.click(function(event){
		// console.log( 'Current Term before group: ', currentTerm );
		dataStructure.chooseGroupTerms( currentTerm );
	});
	
	$('#<portlet:namespace/>btnAddOption').click(function(event){
		currentTerm.addOption();
		dataStructure.disable(['btnAddOption'], true);
		
		dataStructure.refreshTerm( currentTerm );
	});
	
	$('#<portlet:namespace/>btnAdd').click(function(){
		if( dataStructure.addTerm( currentTerm,  0,  SX.SXConstants.FOR_PREVIEW, true ) ){
			dataStructure.disable(['add', 'btnClear', 'termType'], true);
			/*
			$('#<portlet:namespace/>add').prop('disabled', true);
			$('#<portlet:namespace/>btnClear').prop('disabled', true); 
			*/
		}
		
		// console.log('currentTerm: ',  currentTerm, dataStructure.terms );
	});
	
	$('#<portlet:namespace/>btnRefresh').click(function(event){
		dataStructure.render(SX.SXConstants.FOR_PREVIEW);
	});
	
	$('#<portlet:namespace/>btnUp').click(function(event){
		if( !currentTerm.isRendered() ){
			return;
		}
		
		dataStructure.moveUpTerm( currentTerm );
	});
	
	$('#<portlet:namespace/>btnDown').click(function(event){
		if( !currentTerm.isRendered() ){
			return;
		}
		
		dataStructure.moveDownTerm( currentTerm );
	});
	
	$('#<portlet:namespace/>btnSave').click(function(event){
		if( !dataStructure.terms || dataStructure.terms.length < 1 ){
			return;
		}
		
		// console.log( 'Before Save: ', dataStructure, JSON.stringify(dataStructure, null, 4) );
		
		$.ajax({
			url: '<%= saveDataStructureResourceCommandURL.toString() %>',
			method: 'post',
			dataType: 'text',
			data: {
				<portlet:namespace/>dataTypeId: '<%= String.valueOf(dataTypeId) %>',
				<portlet:namespace/>dataStructure: JSON.stringify(dataStructure)
			},
			success: function( result ){
				dataStructure.clearTermsDirty();
			},
			error: function(){
				console.log('error');
			}
		});
		
	});
	
	$('#<portlet:namespace/>btnSaveAndViewDataTypeList').click(function(event){
		if( !dataStructure.terms || dataStructure.terms.length < 1 ){
			return;
		}
		
		$.ajax({
			url: '<%= saveDataStructureResourceCommandURL.toString() %>',
			method: 'post',
			dataType: 'text',
			data: {
				<portlet:namespace/>dataTypeId: '<%= String.valueOf(dataTypeId) %>',
				<portlet:namespace/>dataStructure: JSON.stringify(dataStructure)
			},
			success: function( result ){
				// console.log( result );
				// redirect to datatype list view
				window.location.href='<%= dataTypeListURL %>';
			},
			error: function(){
				console.log('error');
			}
		});
	});
});
</aui:script>

