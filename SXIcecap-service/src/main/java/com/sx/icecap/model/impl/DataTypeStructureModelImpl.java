/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sx.icecap.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.sx.icecap.model.DataTypeStructure;
import com.sx.icecap.model.DataTypeStructureModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DataTypeStructure service. Represents a row in the &quot;SX_ICECAP_DataTypeStructure&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DataTypeStructureModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataTypeStructureImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DataTypeStructureImpl
 * @generated
 */
public class DataTypeStructureModelImpl
	extends BaseModelImpl<DataTypeStructure> implements DataTypeStructureModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data type structure model instance should use the <code>DataTypeStructure</code> interface instead.
	 */
	public static final String TABLE_NAME = "SX_ICECAP_DataTypeStructure";

	public static final Object[][] TABLE_COLUMNS = {
		{"dataTypeId", Types.BIGINT}, {"structure", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dataTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("structure", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SX_ICECAP_DataTypeStructure (dataTypeId LONG not null primary key,structure TEXT null)";

	public static final String TABLE_SQL_DROP =
		"drop table SX_ICECAP_DataTypeStructure";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dataTypeStructure.dataTypeId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SX_ICECAP_DataTypeStructure.dataTypeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public DataTypeStructureModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dataTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDataTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dataTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DataTypeStructure.class;
	}

	@Override
	public String getModelClassName() {
		return DataTypeStructure.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DataTypeStructure, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DataTypeStructure, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataTypeStructure, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DataTypeStructure)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DataTypeStructure, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DataTypeStructure, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DataTypeStructure)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DataTypeStructure, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DataTypeStructure, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DataTypeStructure>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DataTypeStructure.class.getClassLoader(), DataTypeStructure.class,
			ModelWrapper.class);

		try {
			Constructor<DataTypeStructure> constructor =
				(Constructor<DataTypeStructure>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DataTypeStructure, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DataTypeStructure, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DataTypeStructure, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DataTypeStructure, Object>>();
		Map<String, BiConsumer<DataTypeStructure, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<DataTypeStructure, ?>>();

		attributeGetterFunctions.put(
			"dataTypeId", DataTypeStructure::getDataTypeId);
		attributeSetterBiConsumers.put(
			"dataTypeId",
			(BiConsumer<DataTypeStructure, Long>)
				DataTypeStructure::setDataTypeId);
		attributeGetterFunctions.put(
			"structure", DataTypeStructure::getStructure);
		attributeSetterBiConsumers.put(
			"structure",
			(BiConsumer<DataTypeStructure, String>)
				DataTypeStructure::setStructure);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getDataTypeId() {
		return _dataTypeId;
	}

	@Override
	public void setDataTypeId(long dataTypeId) {
		_dataTypeId = dataTypeId;
	}

	@JSON
	@Override
	public String getStructure() {
		if (_structure == null) {
			return "";
		}
		else {
			return _structure;
		}
	}

	@Override
	public void setStructure(String structure) {
		_structure = structure;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DataTypeStructure.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DataTypeStructure toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DataTypeStructure>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataTypeStructureImpl dataTypeStructureImpl =
			new DataTypeStructureImpl();

		dataTypeStructureImpl.setDataTypeId(getDataTypeId());
		dataTypeStructureImpl.setStructure(getStructure());

		dataTypeStructureImpl.resetOriginalValues();

		return dataTypeStructureImpl;
	}

	@Override
	public int compareTo(DataTypeStructure dataTypeStructure) {
		long primaryKey = dataTypeStructure.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DataTypeStructure)) {
			return false;
		}

		DataTypeStructure dataTypeStructure = (DataTypeStructure)object;

		long primaryKey = dataTypeStructure.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DataTypeStructure> toCacheModel() {
		DataTypeStructureCacheModel dataTypeStructureCacheModel =
			new DataTypeStructureCacheModel();

		dataTypeStructureCacheModel.dataTypeId = getDataTypeId();

		dataTypeStructureCacheModel.structure = getStructure();

		String structure = dataTypeStructureCacheModel.structure;

		if ((structure != null) && (structure.length() == 0)) {
			dataTypeStructureCacheModel.structure = null;
		}

		return dataTypeStructureCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DataTypeStructure, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DataTypeStructure, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataTypeStructure, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DataTypeStructure)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DataTypeStructure, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DataTypeStructure, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataTypeStructure, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DataTypeStructure)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DataTypeStructure>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _dataTypeId;
	private String _structure;
	private DataTypeStructure _escapedModel;

}