/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sx.icecap.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.NoSuchModelException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ContainerModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.TrashedModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import com.sx.icecap.model.DataPackEntry;
import com.sx.icecap.model.DataPackEntryModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DataPackEntry service. Represents a row in the &quot;SX_ICECAP_DataPackEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DataPackEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataPackEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DataPackEntryImpl
 * @generated
 */
public class DataPackEntryModelImpl
	extends BaseModelImpl<DataPackEntry> implements DataPackEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a data pack entry model instance should use the <code>DataPackEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "SX_ICECAP_DataPackEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"dataPackEntryId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"dataSetId", Types.BIGINT}, {"dataSetFolderId", Types.BIGINT},
		{"dataPackId", Types.BIGINT}, {"entryData", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataPackEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dataSetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataSetFolderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataPackId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("entryData", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SX_ICECAP_DataPackEntry (uuid_ VARCHAR(75) null,dataPackEntryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,dataSetId LONG,dataSetFolderId LONG,dataPackId LONG,entryData VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table SX_ICECAP_DataPackEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dataPackEntry.dataPackEntryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SX_ICECAP_DataPackEntry.dataPackEntryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long DATAPACKID_COLUMN_BITMASK = 2L;

	public static final long DATASETFOLDERID_COLUMN_BITMASK = 4L;

	public static final long DATASETID_COLUMN_BITMASK = 8L;

	public static final long GROUPID_COLUMN_BITMASK = 16L;

	public static final long STATUS_COLUMN_BITMASK = 32L;

	public static final long USERID_COLUMN_BITMASK = 64L;

	public static final long UUID_COLUMN_BITMASK = 128L;

	public static final long DATAPACKENTRYID_COLUMN_BITMASK = 256L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public DataPackEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dataPackEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDataPackEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dataPackEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DataPackEntry.class;
	}

	@Override
	public String getModelClassName() {
		return DataPackEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DataPackEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DataPackEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataPackEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DataPackEntry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DataPackEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DataPackEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DataPackEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DataPackEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DataPackEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DataPackEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DataPackEntry.class.getClassLoader(), DataPackEntry.class,
			ModelWrapper.class);

		try {
			Constructor<DataPackEntry> constructor =
				(Constructor<DataPackEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DataPackEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DataPackEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DataPackEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DataPackEntry, Object>>();
		Map<String, BiConsumer<DataPackEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DataPackEntry, ?>>();

		attributeGetterFunctions.put("uuid", DataPackEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<DataPackEntry, String>)DataPackEntry::setUuid);
		attributeGetterFunctions.put(
			"dataPackEntryId", DataPackEntry::getDataPackEntryId);
		attributeSetterBiConsumers.put(
			"dataPackEntryId",
			(BiConsumer<DataPackEntry, Long>)DataPackEntry::setDataPackEntryId);
		attributeGetterFunctions.put("groupId", DataPackEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<DataPackEntry, Long>)DataPackEntry::setGroupId);
		attributeGetterFunctions.put("companyId", DataPackEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<DataPackEntry, Long>)DataPackEntry::setCompanyId);
		attributeGetterFunctions.put("userId", DataPackEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<DataPackEntry, Long>)DataPackEntry::setUserId);
		attributeGetterFunctions.put("userName", DataPackEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<DataPackEntry, String>)DataPackEntry::setUserName);
		attributeGetterFunctions.put(
			"createDate", DataPackEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<DataPackEntry, Date>)DataPackEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", DataPackEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<DataPackEntry, Date>)DataPackEntry::setModifiedDate);
		attributeGetterFunctions.put("status", DataPackEntry::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<DataPackEntry, Integer>)DataPackEntry::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", DataPackEntry::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<DataPackEntry, Long>)DataPackEntry::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", DataPackEntry::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<DataPackEntry, String>)
				DataPackEntry::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", DataPackEntry::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<DataPackEntry, Date>)DataPackEntry::setStatusDate);
		attributeGetterFunctions.put("dataSetId", DataPackEntry::getDataSetId);
		attributeSetterBiConsumers.put(
			"dataSetId",
			(BiConsumer<DataPackEntry, Long>)DataPackEntry::setDataSetId);
		attributeGetterFunctions.put(
			"dataSetFolderId", DataPackEntry::getDataSetFolderId);
		attributeSetterBiConsumers.put(
			"dataSetFolderId",
			(BiConsumer<DataPackEntry, Long>)DataPackEntry::setDataSetFolderId);
		attributeGetterFunctions.put(
			"dataPackId", DataPackEntry::getDataPackId);
		attributeSetterBiConsumers.put(
			"dataPackId",
			(BiConsumer<DataPackEntry, Long>)DataPackEntry::setDataPackId);
		attributeGetterFunctions.put("entryData", DataPackEntry::getEntryData);
		attributeSetterBiConsumers.put(
			"entryData",
			(BiConsumer<DataPackEntry, String>)DataPackEntry::setEntryData);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getDataPackEntryId() {
		return _dataPackEntryId;
	}

	@Override
	public void setDataPackEntryId(long dataPackEntryId) {
		_dataPackEntryId = dataPackEntryId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public long getDataSetId() {
		return _dataSetId;
	}

	@Override
	public void setDataSetId(long dataSetId) {
		_columnBitmask |= DATASETID_COLUMN_BITMASK;

		if (!_setOriginalDataSetId) {
			_setOriginalDataSetId = true;

			_originalDataSetId = _dataSetId;
		}

		_dataSetId = dataSetId;
	}

	public long getOriginalDataSetId() {
		return _originalDataSetId;
	}

	@Override
	public long getDataSetFolderId() {
		return _dataSetFolderId;
	}

	@Override
	public void setDataSetFolderId(long dataSetFolderId) {
		_columnBitmask |= DATASETFOLDERID_COLUMN_BITMASK;

		if (!_setOriginalDataSetFolderId) {
			_setOriginalDataSetFolderId = true;

			_originalDataSetFolderId = _dataSetFolderId;
		}

		_dataSetFolderId = dataSetFolderId;
	}

	public long getOriginalDataSetFolderId() {
		return _originalDataSetFolderId;
	}

	@Override
	public long getDataPackId() {
		return _dataPackId;
	}

	@Override
	public void setDataPackId(long dataPackId) {
		_columnBitmask |= DATAPACKID_COLUMN_BITMASK;

		if (!_setOriginalDataPackId) {
			_setOriginalDataPackId = true;

			_originalDataPackId = _dataPackId;
		}

		_dataPackId = dataPackId;
	}

	public long getOriginalDataPackId() {
		return _originalDataPackId;
	}

	@Override
	public String getEntryData() {
		if (_entryData == null) {
			return "";
		}
		else {
			return _entryData;
		}
	}

	@Override
	public void setEntryData(String entryData) {
		_entryData = entryData;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(DataPackEntry.class.getName()));
	}

	@Override
	public com.liferay.trash.kernel.model.TrashEntry getTrashEntry()
		throws PortalException {

		if (!isInTrash()) {
			return null;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return trashEntry;
		}

		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if (Validator.isNotNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			ContainerModel containerModel = null;

			try {
				containerModel = trashHandler.getParentContainerModel(this);
			}
			catch (NoSuchModelException noSuchModelException) {
				return null;
			}

			while (containerModel != null) {
				if (containerModel instanceof TrashedModel) {
					TrashedModel trashedModel = (TrashedModel)containerModel;

					return trashedModel.getTrashEntry();
				}

				trashHandler =
					com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
						getTrashHandler(
							trashHandler.getContainerModelClassName(
								containerModel.getContainerModelId()));

				if (trashHandler == null) {
					return null;
				}

				containerModel = trashHandler.getContainerModel(
					containerModel.getParentContainerModelId());
			}
		}

		return null;
	}

	@Override
	public long getTrashEntryClassPK() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Judson (7.1.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public com.liferay.portal.kernel.trash.TrashHandler getTrashHandler() {
		return com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
			getTrashHandler(getModelClassName());
	}

	@Override
	public boolean isInTrash() {
		if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInTrashContainer() {
		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if ((trashHandler == null) ||
			Validator.isNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			return false;
		}

		try {
			ContainerModel containerModel =
				trashHandler.getParentContainerModel(this);

			if (containerModel == null) {
				return false;
			}

			if (containerModel instanceof TrashedModel) {
				return ((TrashedModel)containerModel).isInTrash();
			}
		}
		catch (Exception exception) {
		}

		return false;
	}

	@Override
	public boolean isInTrashExplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return true;
		}

		return false;
	}

	@Override
	public boolean isInTrashImplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return false;
		}

		return true;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DataPackEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DataPackEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DataPackEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DataPackEntryImpl dataPackEntryImpl = new DataPackEntryImpl();

		dataPackEntryImpl.setUuid(getUuid());
		dataPackEntryImpl.setDataPackEntryId(getDataPackEntryId());
		dataPackEntryImpl.setGroupId(getGroupId());
		dataPackEntryImpl.setCompanyId(getCompanyId());
		dataPackEntryImpl.setUserId(getUserId());
		dataPackEntryImpl.setUserName(getUserName());
		dataPackEntryImpl.setCreateDate(getCreateDate());
		dataPackEntryImpl.setModifiedDate(getModifiedDate());
		dataPackEntryImpl.setStatus(getStatus());
		dataPackEntryImpl.setStatusByUserId(getStatusByUserId());
		dataPackEntryImpl.setStatusByUserName(getStatusByUserName());
		dataPackEntryImpl.setStatusDate(getStatusDate());
		dataPackEntryImpl.setDataSetId(getDataSetId());
		dataPackEntryImpl.setDataSetFolderId(getDataSetFolderId());
		dataPackEntryImpl.setDataPackId(getDataPackId());
		dataPackEntryImpl.setEntryData(getEntryData());

		dataPackEntryImpl.resetOriginalValues();

		return dataPackEntryImpl;
	}

	@Override
	public int compareTo(DataPackEntry dataPackEntry) {
		long primaryKey = dataPackEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DataPackEntry)) {
			return false;
		}

		DataPackEntry dataPackEntry = (DataPackEntry)object;

		long primaryKey = dataPackEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalCompanyId = _companyId;

		_setOriginalCompanyId = false;

		_originalUserId = _userId;

		_setOriginalUserId = false;

		_setModifiedDate = false;
		_originalStatus = _status;

		_setOriginalStatus = false;

		_originalDataSetId = _dataSetId;

		_setOriginalDataSetId = false;

		_originalDataSetFolderId = _dataSetFolderId;

		_setOriginalDataSetFolderId = false;

		_originalDataPackId = _dataPackId;

		_setOriginalDataPackId = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DataPackEntry> toCacheModel() {
		DataPackEntryCacheModel dataPackEntryCacheModel =
			new DataPackEntryCacheModel();

		dataPackEntryCacheModel.uuid = getUuid();

		String uuid = dataPackEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dataPackEntryCacheModel.uuid = null;
		}

		dataPackEntryCacheModel.dataPackEntryId = getDataPackEntryId();

		dataPackEntryCacheModel.groupId = getGroupId();

		dataPackEntryCacheModel.companyId = getCompanyId();

		dataPackEntryCacheModel.userId = getUserId();

		dataPackEntryCacheModel.userName = getUserName();

		String userName = dataPackEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dataPackEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dataPackEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			dataPackEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dataPackEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dataPackEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dataPackEntryCacheModel.status = getStatus();

		dataPackEntryCacheModel.statusByUserId = getStatusByUserId();

		dataPackEntryCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = dataPackEntryCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			dataPackEntryCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			dataPackEntryCacheModel.statusDate = statusDate.getTime();
		}
		else {
			dataPackEntryCacheModel.statusDate = Long.MIN_VALUE;
		}

		dataPackEntryCacheModel.dataSetId = getDataSetId();

		dataPackEntryCacheModel.dataSetFolderId = getDataSetFolderId();

		dataPackEntryCacheModel.dataPackId = getDataPackId();

		dataPackEntryCacheModel.entryData = getEntryData();

		String entryData = dataPackEntryCacheModel.entryData;

		if ((entryData != null) && (entryData.length() == 0)) {
			dataPackEntryCacheModel.entryData = null;
		}

		return dataPackEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DataPackEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DataPackEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataPackEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DataPackEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DataPackEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DataPackEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DataPackEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DataPackEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DataPackEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _dataPackEntryId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _dataSetId;
	private long _originalDataSetId;
	private boolean _setOriginalDataSetId;
	private long _dataSetFolderId;
	private long _originalDataSetFolderId;
	private boolean _setOriginalDataSetFolderId;
	private long _dataPackId;
	private long _originalDataPackId;
	private boolean _setOriginalDataPackId;
	private String _entryData;
	private long _columnBitmask;
	private DataPackEntry _escapedModel;

}