/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sx.icecap.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedAuditedModel;
import com.liferay.portal.kernel.model.TrashedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the StructuredData service. Represents a row in the &quot;SX_ICECAP_StructuredData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.sx.icecap.model.impl.StructuredDataModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.sx.icecap.model.impl.StructuredDataImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StructuredData
 * @generated
 */
@ProviderType
public interface StructuredDataModel
	extends BaseModel<StructuredData>, GroupedModel, LocalizedModel,
			ShardedModel, StagedAuditedModel, TrashedModel, WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a structured data model instance should use the {@link StructuredData} interface instead.
	 */

	/**
	 * Returns the primary key of this structured data.
	 *
	 * @return the primary key of this structured data
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this structured data.
	 *
	 * @param primaryKey the primary key of this structured data
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this structured data.
	 *
	 * @return the uuid of this structured data
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this structured data.
	 *
	 * @param uuid the uuid of this structured data
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the structured data ID of this structured data.
	 *
	 * @return the structured data ID of this structured data
	 */
	public long getStructuredDataId();

	/**
	 * Sets the structured data ID of this structured data.
	 *
	 * @param structuredDataId the structured data ID of this structured data
	 */
	public void setStructuredDataId(long structuredDataId);

	/**
	 * Returns the group ID of this structured data.
	 *
	 * @return the group ID of this structured data
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this structured data.
	 *
	 * @param groupId the group ID of this structured data
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this structured data.
	 *
	 * @return the company ID of this structured data
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this structured data.
	 *
	 * @param companyId the company ID of this structured data
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this structured data.
	 *
	 * @return the user ID of this structured data
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this structured data.
	 *
	 * @param userId the user ID of this structured data
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this structured data.
	 *
	 * @return the user uuid of this structured data
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this structured data.
	 *
	 * @param userUuid the user uuid of this structured data
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this structured data.
	 *
	 * @return the user name of this structured data
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this structured data.
	 *
	 * @param userName the user name of this structured data
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this structured data.
	 *
	 * @return the create date of this structured data
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this structured data.
	 *
	 * @param createDate the create date of this structured data
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this structured data.
	 *
	 * @return the modified date of this structured data
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this structured data.
	 *
	 * @param modifiedDate the modified date of this structured data
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the status of this structured data.
	 *
	 * @return the status of this structured data
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this structured data.
	 *
	 * @param status the status of this structured data
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this structured data.
	 *
	 * @return the status by user ID of this structured data
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this structured data.
	 *
	 * @param statusByUserId the status by user ID of this structured data
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this structured data.
	 *
	 * @return the status by user uuid of this structured data
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this structured data.
	 *
	 * @param statusByUserUuid the status by user uuid of this structured data
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this structured data.
	 *
	 * @return the status by user name of this structured data
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this structured data.
	 *
	 * @param statusByUserName the status by user name of this structured data
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this structured data.
	 *
	 * @return the status date of this structured data
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this structured data.
	 *
	 * @param statusDate the status date of this structured data
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the data set ID of this structured data.
	 *
	 * @return the data set ID of this structured data
	 */
	public long getDataSetId();

	/**
	 * Sets the data set ID of this structured data.
	 *
	 * @param dataSetId the data set ID of this structured data
	 */
	public void setDataSetId(long dataSetId);

	/**
	 * Returns the data set display name of this structured data.
	 *
	 * @return the data set display name of this structured data
	 */
	public String getDataSetDisplayName();

	/**
	 * Returns the localized data set display name of this structured data in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized data set display name of this structured data
	 */
	@AutoEscape
	public String getDataSetDisplayName(Locale locale);

	/**
	 * Returns the localized data set display name of this structured data in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized data set display name of this structured data. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDataSetDisplayName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized data set display name of this structured data in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized data set display name of this structured data
	 */
	@AutoEscape
	public String getDataSetDisplayName(String languageId);

	/**
	 * Returns the localized data set display name of this structured data in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized data set display name of this structured data
	 */
	@AutoEscape
	public String getDataSetDisplayName(String languageId, boolean useDefault);

	@AutoEscape
	public String getDataSetDisplayNameCurrentLanguageId();

	@AutoEscape
	public String getDataSetDisplayNameCurrentValue();

	/**
	 * Returns a map of the locales and localized data set display names of this structured data.
	 *
	 * @return the locales and localized data set display names of this structured data
	 */
	public Map<Locale, String> getDataSetDisplayNameMap();

	/**
	 * Sets the data set display name of this structured data.
	 *
	 * @param dataSetDisplayName the data set display name of this structured data
	 */
	public void setDataSetDisplayName(String dataSetDisplayName);

	/**
	 * Sets the localized data set display name of this structured data in the language.
	 *
	 * @param dataSetDisplayName the localized data set display name of this structured data
	 * @param locale the locale of the language
	 */
	public void setDataSetDisplayName(String dataSetDisplayName, Locale locale);

	/**
	 * Sets the localized data set display name of this structured data in the language, and sets the default locale.
	 *
	 * @param dataSetDisplayName the localized data set display name of this structured data
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDataSetDisplayName(
		String dataSetDisplayName, Locale locale, Locale defaultLocale);

	public void setDataSetDisplayNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized data set display names of this structured data from the map of locales and localized data set display names.
	 *
	 * @param dataSetDisplayNameMap the locales and localized data set display names of this structured data
	 */
	public void setDataSetDisplayNameMap(
		Map<Locale, String> dataSetDisplayNameMap);

	/**
	 * Sets the localized data set display names of this structured data from the map of locales and localized data set display names, and sets the default locale.
	 *
	 * @param dataSetDisplayNameMap the locales and localized data set display names of this structured data
	 * @param defaultLocale the default locale
	 */
	public void setDataSetDisplayNameMap(
		Map<Locale, String> dataSetDisplayNameMap, Locale defaultLocale);

	/**
	 * Returns the data type ID of this structured data.
	 *
	 * @return the data type ID of this structured data
	 */
	public long getDataTypeId();

	/**
	 * Sets the data type ID of this structured data.
	 *
	 * @param dataTypeId the data type ID of this structured data
	 */
	public void setDataTypeId(long dataTypeId);

	/**
	 * Returns the data type display name of this structured data.
	 *
	 * @return the data type display name of this structured data
	 */
	public String getDataTypeDisplayName();

	/**
	 * Returns the localized data type display name of this structured data in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized data type display name of this structured data
	 */
	@AutoEscape
	public String getDataTypeDisplayName(Locale locale);

	/**
	 * Returns the localized data type display name of this structured data in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized data type display name of this structured data. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDataTypeDisplayName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized data type display name of this structured data in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized data type display name of this structured data
	 */
	@AutoEscape
	public String getDataTypeDisplayName(String languageId);

	/**
	 * Returns the localized data type display name of this structured data in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized data type display name of this structured data
	 */
	@AutoEscape
	public String getDataTypeDisplayName(String languageId, boolean useDefault);

	@AutoEscape
	public String getDataTypeDisplayNameCurrentLanguageId();

	@AutoEscape
	public String getDataTypeDisplayNameCurrentValue();

	/**
	 * Returns a map of the locales and localized data type display names of this structured data.
	 *
	 * @return the locales and localized data type display names of this structured data
	 */
	public Map<Locale, String> getDataTypeDisplayNameMap();

	/**
	 * Sets the data type display name of this structured data.
	 *
	 * @param dataTypeDisplayName the data type display name of this structured data
	 */
	public void setDataTypeDisplayName(String dataTypeDisplayName);

	/**
	 * Sets the localized data type display name of this structured data in the language.
	 *
	 * @param dataTypeDisplayName the localized data type display name of this structured data
	 * @param locale the locale of the language
	 */
	public void setDataTypeDisplayName(
		String dataTypeDisplayName, Locale locale);

	/**
	 * Sets the localized data type display name of this structured data in the language, and sets the default locale.
	 *
	 * @param dataTypeDisplayName the localized data type display name of this structured data
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDataTypeDisplayName(
		String dataTypeDisplayName, Locale locale, Locale defaultLocale);

	public void setDataTypeDisplayNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized data type display names of this structured data from the map of locales and localized data type display names.
	 *
	 * @param dataTypeDisplayNameMap the locales and localized data type display names of this structured data
	 */
	public void setDataTypeDisplayNameMap(
		Map<Locale, String> dataTypeDisplayNameMap);

	/**
	 * Sets the localized data type display names of this structured data from the map of locales and localized data type display names, and sets the default locale.
	 *
	 * @param dataTypeDisplayNameMap the locales and localized data type display names of this structured data
	 * @param defaultLocale the default locale
	 */
	public void setDataTypeDisplayNameMap(
		Map<Locale, String> dataTypeDisplayNameMap, Locale defaultLocale);

	/**
	 * Returns the data set folder ID of this structured data.
	 *
	 * @return the data set folder ID of this structured data
	 */
	public long getDataSetFolderId();

	/**
	 * Sets the data set folder ID of this structured data.
	 *
	 * @param dataSetFolderId the data set folder ID of this structured data
	 */
	public void setDataSetFolderId(long dataSetFolderId);

	/**
	 * Returns the data set folder name of this structured data.
	 *
	 * @return the data set folder name of this structured data
	 */
	public String getDataSetFolderName();

	/**
	 * Returns the localized data set folder name of this structured data in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized data set folder name of this structured data
	 */
	@AutoEscape
	public String getDataSetFolderName(Locale locale);

	/**
	 * Returns the localized data set folder name of this structured data in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized data set folder name of this structured data. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDataSetFolderName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized data set folder name of this structured data in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized data set folder name of this structured data
	 */
	@AutoEscape
	public String getDataSetFolderName(String languageId);

	/**
	 * Returns the localized data set folder name of this structured data in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized data set folder name of this structured data
	 */
	@AutoEscape
	public String getDataSetFolderName(String languageId, boolean useDefault);

	@AutoEscape
	public String getDataSetFolderNameCurrentLanguageId();

	@AutoEscape
	public String getDataSetFolderNameCurrentValue();

	/**
	 * Returns a map of the locales and localized data set folder names of this structured data.
	 *
	 * @return the locales and localized data set folder names of this structured data
	 */
	public Map<Locale, String> getDataSetFolderNameMap();

	/**
	 * Sets the data set folder name of this structured data.
	 *
	 * @param dataSetFolderName the data set folder name of this structured data
	 */
	public void setDataSetFolderName(String dataSetFolderName);

	/**
	 * Sets the localized data set folder name of this structured data in the language.
	 *
	 * @param dataSetFolderName the localized data set folder name of this structured data
	 * @param locale the locale of the language
	 */
	public void setDataSetFolderName(String dataSetFolderName, Locale locale);

	/**
	 * Sets the localized data set folder name of this structured data in the language, and sets the default locale.
	 *
	 * @param dataSetFolderName the localized data set folder name of this structured data
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDataSetFolderName(
		String dataSetFolderName, Locale locale, Locale defaultLocale);

	public void setDataSetFolderNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized data set folder names of this structured data from the map of locales and localized data set folder names.
	 *
	 * @param dataSetFolderNameMap the locales and localized data set folder names of this structured data
	 */
	public void setDataSetFolderNameMap(
		Map<Locale, String> dataSetFolderNameMap);

	/**
	 * Sets the localized data set folder names of this structured data from the map of locales and localized data set folder names, and sets the default locale.
	 *
	 * @param dataSetFolderNameMap the locales and localized data set folder names of this structured data
	 * @param defaultLocale the default locale
	 */
	public void setDataSetFolderNameMap(
		Map<Locale, String> dataSetFolderNameMap, Locale defaultLocale);

	/**
	 * Returns the data pack ID of this structured data.
	 *
	 * @return the data pack ID of this structured data
	 */
	public long getDataPackId();

	/**
	 * Sets the data pack ID of this structured data.
	 *
	 * @param dataPackId the data pack ID of this structured data
	 */
	public void setDataPackId(long dataPackId);

	/**
	 * Returns the data pack display name of this structured data.
	 *
	 * @return the data pack display name of this structured data
	 */
	public String getDataPackDisplayName();

	/**
	 * Returns the localized data pack display name of this structured data in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized data pack display name of this structured data
	 */
	@AutoEscape
	public String getDataPackDisplayName(Locale locale);

	/**
	 * Returns the localized data pack display name of this structured data in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized data pack display name of this structured data. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDataPackDisplayName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized data pack display name of this structured data in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized data pack display name of this structured data
	 */
	@AutoEscape
	public String getDataPackDisplayName(String languageId);

	/**
	 * Returns the localized data pack display name of this structured data in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized data pack display name of this structured data
	 */
	@AutoEscape
	public String getDataPackDisplayName(String languageId, boolean useDefault);

	@AutoEscape
	public String getDataPackDisplayNameCurrentLanguageId();

	@AutoEscape
	public String getDataPackDisplayNameCurrentValue();

	/**
	 * Returns a map of the locales and localized data pack display names of this structured data.
	 *
	 * @return the locales and localized data pack display names of this structured data
	 */
	public Map<Locale, String> getDataPackDisplayNameMap();

	/**
	 * Sets the data pack display name of this structured data.
	 *
	 * @param dataPackDisplayName the data pack display name of this structured data
	 */
	public void setDataPackDisplayName(String dataPackDisplayName);

	/**
	 * Sets the localized data pack display name of this structured data in the language.
	 *
	 * @param dataPackDisplayName the localized data pack display name of this structured data
	 * @param locale the locale of the language
	 */
	public void setDataPackDisplayName(
		String dataPackDisplayName, Locale locale);

	/**
	 * Sets the localized data pack display name of this structured data in the language, and sets the default locale.
	 *
	 * @param dataPackDisplayName the localized data pack display name of this structured data
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDataPackDisplayName(
		String dataPackDisplayName, Locale locale, Locale defaultLocale);

	public void setDataPackDisplayNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized data pack display names of this structured data from the map of locales and localized data pack display names.
	 *
	 * @param dataPackDisplayNameMap the locales and localized data pack display names of this structured data
	 */
	public void setDataPackDisplayNameMap(
		Map<Locale, String> dataPackDisplayNameMap);

	/**
	 * Sets the localized data pack display names of this structured data from the map of locales and localized data pack display names, and sets the default locale.
	 *
	 * @param dataPackDisplayNameMap the locales and localized data pack display names of this structured data
	 * @param defaultLocale the default locale
	 */
	public void setDataPackDisplayNameMap(
		Map<Locale, String> dataPackDisplayNameMap, Locale defaultLocale);

	/**
	 * Returns the record type of this structured data.
	 *
	 * @return the record type of this structured data
	 */
	@AutoEscape
	public String getRecordType();

	/**
	 * Sets the record type of this structured data.
	 *
	 * @param recordType the record type of this structured data
	 */
	public void setRecordType(String recordType);

	/**
	 * Returns the record delimiter of this structured data.
	 *
	 * @return the record delimiter of this structured data
	 */
	@AutoEscape
	public String getRecordDelimiter();

	/**
	 * Sets the record delimiter of this structured data.
	 *
	 * @param recordDelimiter the record delimiter of this structured data
	 */
	public void setRecordDelimiter(String recordDelimiter);

	/**
	 * Returns the record format of this structured data.
	 *
	 * @return the record format of this structured data
	 */
	@AutoEscape
	public String getRecordFormat();

	/**
	 * Sets the record format of this structured data.
	 *
	 * @param recordFormat the record format of this structured data
	 */
	public void setRecordFormat(String recordFormat);

	/**
	 * Returns the entry count of this structured data.
	 *
	 * @return the entry count of this structured data
	 */
	public int getEntryCount();

	/**
	 * Sets the entry count of this structured data.
	 *
	 * @param entryCount the entry count of this structured data
	 */
	public void setEntryCount(int entryCount);

	/**
	 * Returns the start entry no of this structured data.
	 *
	 * @return the start entry no of this structured data
	 */
	public int getStartEntryNo();

	/**
	 * Sets the start entry no of this structured data.
	 *
	 * @param startEntryNo the start entry no of this structured data
	 */
	public void setStartEntryNo(int startEntryNo);

	/**
	 * Returns the end entry no of this structured data.
	 *
	 * @return the end entry no of this structured data
	 */
	public int getEndEntryNo();

	/**
	 * Sets the end entry no of this structured data.
	 *
	 * @param endEntryNo the end entry no of this structured data
	 */
	public void setEndEntryNo(int endEntryNo);

	/**
	 * Returns the structured data of this structured data.
	 *
	 * @return the structured data of this structured data
	 */
	@AutoEscape
	public String getStructuredData();

	/**
	 * Sets the structured data of this structured data.
	 *
	 * @param structuredData the structured data of this structured data
	 */
	public void setStructuredData(String structuredData);

	/**
	 * Returns the trash entry created when this structured data was moved to the Recycle Bin. The trash entry may belong to one of the ancestors of this structured data.
	 *
	 * @return the trash entry created when this structured data was moved to the Recycle Bin
	 */
	@Override
	public com.liferay.trash.kernel.model.TrashEntry getTrashEntry()
		throws PortalException;

	/**
	 * Returns the class primary key of the trash entry for this structured data.
	 *
	 * @return the class primary key of the trash entry for this structured data
	 */
	@Override
	public long getTrashEntryClassPK();

	/**
	 * Returns the trash handler for this structured data.
	 *
	 * @return the trash handler for this structured data
	 * @deprecated As of Judson (7.1.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public com.liferay.portal.kernel.trash.TrashHandler getTrashHandler();

	/**
	 * Returns <code>true</code> if this structured data is in the Recycle Bin.
	 *
	 * @return <code>true</code> if this structured data is in the Recycle Bin; <code>false</code> otherwise
	 */
	@Override
	public boolean isInTrash();

	/**
	 * Returns <code>true</code> if the parent of this structured data is in the Recycle Bin.
	 *
	 * @return <code>true</code> if the parent of this structured data is in the Recycle Bin; <code>false</code> otherwise
	 */
	@Override
	public boolean isInTrashContainer();

	@Override
	public boolean isInTrashExplicitly();

	@Override
	public boolean isInTrashImplicitly();

	/**
	 * Returns <code>true</code> if this structured data is approved.
	 *
	 * @return <code>true</code> if this structured data is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this structured data is denied.
	 *
	 * @return <code>true</code> if this structured data is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this structured data is a draft.
	 *
	 * @return <code>true</code> if this structured data is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this structured data is expired.
	 *
	 * @return <code>true</code> if this structured data is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this structured data is inactive.
	 *
	 * @return <code>true</code> if this structured data is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this structured data is incomplete.
	 *
	 * @return <code>true</code> if this structured data is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this structured data is pending.
	 *
	 * @return <code>true</code> if this structured data is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this structured data is scheduled.
	 *
	 * @return <code>true</code> if this structured data is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

}